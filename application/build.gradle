plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
    id 'org.springframework.boot' version '1.5.10.RELEASE'
    id 'org.owasp.dependencycheck' version '3.1.2'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'org.sonarqube' version '2.5'
    id 'jacoco'
    id 'idea'
    id 'eclipse'
}

group = 'uk.gov.hmcts.reform.em'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//    XLINT
compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

tasks.withType(Test) {
    maxParallelForks = 1
}

// Xlint type thingy????
checkstyle {
    showViolations = true
    ignoreFailures = true
    maxWarnings = 0
    toolVersion = '8.7'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
    toolVersion = "5.8.1"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

//    Report Check Style added by Alex
tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

//    OWASP (./gradlew -DdependencyCheck.failBuild=true dependencyCheck;)
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

repositories {
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    jcenter()
    mavenLocal()
}

apply from: 'liquibase.gradle'

def springBootVersion = plugins.getPlugin('org.springframework.boot').class.package.implementationVersion

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
    }
}

def versions = [
    postgresql         : '42.2.1',
    springfoxSwagger   : '2.7.0',
    springBoot         : springBootVersion,
    powermock          : '1.6.5',
    liquibase          : '3.5.3',
]

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    compile group: 'org.springframework', name: 'spring-context-support', version: '4.3.8.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.24.0.RELEASE'

    compile group: 'org.liquibase', name: 'liquibase-core', version: versions.liquibaseVersion

    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

    compile group: 'org.postgresql', name: 'postgresql', version: versions.postgresqlVersion

    compile group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion

    compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.1'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: '2.1.1'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: '2.1.1'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: '2.1.1'
    compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'

    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: '1.4.0.RELEASE'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix-dashboard', version: '1.4.0.RELEASE'

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
        exclude(module: 'commons-logging')
    }
    testCompile group: 'org.springframework.security', name: 'spring-security-test', version: '4.2.3.RELEASE'

    testCompile group: 'com.h2database', name: 'h2', version: '1.0.60'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: versions.powermock
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: versions.powermock

}

def coverageExclusionList = [
  '**uk/gov/hmcts/reform/em/annotation/domain/',
  '**uk/gov/hmcts/reform/em/annotation/EmAnnotationApp.java',
  '**uk/gov/hmcts/reform/em/annotation/hateos/*',
  '**uk/gov/hmcts/reform/em/annotation/exception/*',
  '**uk/gov/hmcts/reform/em/annotation/domain/*',
  '**uk/gov/hmcts/reform/em/annotation/commandobject/*',
  '**uk/gov/hmcts/reform/em/annotation/hibernate/*',
  '**uk/gov/hmcts/reform/em/annotation/config/**/*',
  '**uk/gov/hmcts/reform/em/annotation/errorhandler/*',
  '**uk/gov/hmcts/reform/em/annotation/repository/RepositoryFinder.java',
  '**uk/gov/hmcts/reform/em/annotation/actuate/health/IdamHealth.java',
  '**uk/gov/hmcts/reform/em/annotation/actuate/health/IdamServiceHealth.java'
]

//(jacocoTestReport | jacocoTestCoverageVerification)
jacoco {
    toolVersion = '0.7.9' // jacocoMavenPluginVersion
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusionList)
        })
    }
}

//(./gradlew sonarqube)
sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", coverageExclusionList.join(", ")
    }
}

//(./gradlew clean jar) build/libs/em-api-*-all.jar
//(./gradlew installDist bootRepackage) build/install/em-anno/bin/em-anno
jar {
  baseName 'em-anno'
  destinationDir = file("$rootDir/build/libs")
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
  }
}

bootRepackage {
    classifier 'all'
}

//This is used in get the version for fakeversion and buildInfo  (./gradlew -q printVersion)
task printVersion {
    description 'Prints the version of this project'
    doLast {
        print project.version
    }
}

// Run the app (./gradlew run -Ddebug=true)
run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}
