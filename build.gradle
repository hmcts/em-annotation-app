plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'io.spring.dependency-management' version '1.0.4.RELEASE'
  id 'org.springframework.boot' version '1.5.9.RELEASE'
  id 'org.owasp.dependencycheck' version '3.1.0'
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'org.sonarqube' version '2.5'
  id 'jacoco'
  id 'idea'
}

group = 'uk.gov.hmcts.reform.em'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

//    XLINT
compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

test {
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }
}

tasks.withType(Test) {
  maxParallelForks = 1
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.7'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

//    Report Check Style added by Alex
tasks.withType(Checkstyle) {
  reports {
    xml.enabled false
    html.enabled true
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
//    OWASP (./gradlew -DdependencyCheck.failBuild=true dependencyCheck;)
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
}

repositories {
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
  jcenter()
  mavenLocal()
}

//import liquibase gradle file
apply from: 'liquibase.gradle'

def springBootVersion = plugins.getPlugin('org.springframework.boot').class.package.implementationVersion

def versions = [
  postgresql         : '42.1.4',
  springfoxSwagger   : '2.7.0',
  springBoot         : springBootVersion,
  powermock          : '1.6.5',
  liquibase          : '3.5.3',
]


configurations {
  testSmokeCompile.extendsFrom(testCompile)
  testSmokeRuntime.extendsFrom(testRuntime)
  testIntegrationCompile.extendsFrom(testCompile)
  testIntegrationRuntime.extendsFrom(testRuntime)
}

dependencies {
  compile group: 'commons-io', name: 'commons-io', version: '2.5'

  compile group: 'org.springframework', name: 'spring-context-support', version: '4.3.8.RELEASE'
  compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.23.0.RELEASE'

  compile group: 'org.liquibase', name: 'liquibase-core', version: versions.liquibaseVersion

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compile group: 'org.postgresql', name: 'postgresql', version: versions.postgresqlVersion

  compile group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion

  compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.1'
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: '1.2.1'
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: '1.2.1'
  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'


  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: '1.4.0.RELEASE'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix-dashboard', version: '1.4.0.RELEASE'

  testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
    exclude(module: 'commons-logging')
  }
  testCompile group: 'org.springframework.security', name: 'spring-security-test', version: '4.2.3.RELEASE'

  testCompile group: 'com.h2database', name: 'h2', version: '1.0.60'

  testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: versions.powermock
  testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: versions.powermock

}


sourceSets {
  testIntegration {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/testIntegration/java')
    }
    resources {
      srcDir('src/testIntegration/resources')
    }
  }

  testSmoke {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/testSmoke/java')
    }
    resources {
      srcDir('src/testSmoke/resources')
    }
  }
}

dependencies {
  testIntegrationCompile(sourceSets.test.output)
  testSmokeCompile(sourceSets.test.output)
}


task functional(type: Test) {
  group = 'Delivery pipeline'
  description = 'Executes functional/intergation tests against'
  setTestClassesDirs(sourceSets.testIntegration.output.classesDirs)
  setClasspath(sourceSets.testIntegration.runtimeClasspath)
  include "uk/gov/hmcts/reform/em/annotation/intergration/**"
}

task smoke(type: Test) {
  group = 'Delivery pipeline'
  description = 'Executes non-destructive smoke tests'
  setTestClassesDirs(sourceSets.testSmoke.output.classesDirs)
  setClasspath(sourceSets.testSmoke.runtimeClasspath)
  include "uk/gov/hmcts/reform/em/annotation/smoke/**"
}

def coverageExclusionList = [
  '**uk/gov/hmcts/reform/em/annotation/domain/',
  '**uk/gov/hmcts/reform/em/annotation/EmAnnotationApp.java',
  '**uk/gov/hmcts/reform/em/annotation/hateos/*',
  '**uk/gov/hmcts/reform/em/annotation/exception/*',
  '**uk/gov/hmcts/reform/em/annotation/domain/*',
  '**uk/gov/hmcts/reform/em/annotation/commandobject/*',
  '**uk/gov/hmcts/reform/em/annotation/hibernate/*',
  '**uk/gov/hmcts/reform/em/annotation/config/**/*',
  '**uk/gov/hmcts/reform/em/annotation/errorhandler/*',
  '**uk/gov/hmcts/reform/em/annotation/repository/RepositoryFinder.java'
]

//(jacocoTestReport | jacocoTestCoverageVerification)
jacoco {
  toolVersion = '0.7.9' // jacocoMavenPluginVersion
  reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
  executionData(test)

  reports {
    xml.enabled = true
    csv.enabled = true
  }

  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: coverageExclusionList)
    })
  }
}


//(./gradlew sonarqube)
sonarqube {
  properties {
    property "sonar.projectName", "${rootProject.name}"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.exclusions", coverageExclusionList.join(", ")
  }
}

//(./gradlew clean jar) build/libs/em-api-*-all.jar
//(./gradlew installDist bootRepackage) build/install/em-annotation-app/bin/em-annotation-app
jar {
  baseName 'em-annotation-app'
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
  }
}

bootRepackage {
  classifier 'all'
}

//This is used in get the version for fakeversion and buildInfo  (./gradlew -q printVersion)
task printVersion {
  description 'Prints the version of this project'
  doLast {
    print project.version
  }
}

// Run the app (./gradlew run -Ddebug=true)
run {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}
